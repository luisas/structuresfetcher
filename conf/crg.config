
params {
  config_profile_name = 'CRG profile'
  config_profile_description = 'Configuration to run on CRG cluster'
  dataset_dir="/users/cn/lsantus/"

}


process {
    executor = 'crg'
	  maxRetries = 1
    errorStrategy = "ignore"

    withLabel:process_low {
           queue = 'cn-el7,short-sl7'
           cpus = 1
           memory =  5.GB
           time =  1.h 
       }
    withLabel:process_medium{
           queue = 'cn-el7,short-sl7'
           cpus = 1
           memory =  10.GB
           time =  3.h 
       }
      withLabel:process_medium_high {

           queue = 'cn-el7,short-sl7,long-sl7'
           cpus = 16
           memory = 20.GB
           time = 3.h

    }
}


singularity {
  enabled = true
}

tower {
  accessToken = 'eyJ0aWQiOiA0NTQwfS43MjIxNGZkODA2NDc2MzJmMzI3MGY1ZTkxZTJlYjlmMzA3ODRiY2Zk'
  enabled = true
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
